package com.endoflineblog.truffle.part_08.common;

import java.util.Objects;

/**
 * A class that represents the full identifier of a local variable used for a
 * {@link com.oracle.truffle.api.frame.FrameSlot}.
 * Because scopes can be nested in each other,
 * and variable names are only unique within one scope,
 * simply using the name of the variable is not enough to guarantee uniqueness
 * of a local variable in a given {@link com.oracle.truffle.api.frame.Frame}.
 * Because of that, we also add an index that is generated by
 * {@link com.endoflineblog.truffle.part_08.parsing.EasyScriptTruffleParser}
 * when parsing the program
 * (the index is guaranteed to be unique through a simple global counter).
 */
public final class LocalVariableFrameSlotId {
    public final String variableName;
    public final int index;

    public LocalVariableFrameSlotId(String variableName, int index) {
        this.variableName = variableName;
        this.index = index;
    }

    @Override
    public int hashCode() {
        return Objects.hash(variableName, index);
    }

    @Override
    public boolean equals(Object other) {
        if (!(other instanceof LocalVariableFrameSlotId)) {
            return false;
        }
        var that = (LocalVariableFrameSlotId) other;
        return this.index == that.index &&
                this.variableName.equals(that.variableName);
    }

    @Override
    public String toString() {
        return this.variableName + "-" + this.index;
    }
}
